// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres.xovayflzewnveizvhnua:N4emrifUHCuniYho@aws-1-us-east-2.pooler.supabase.com:6543/postgres?pgbouncer=true"
}

model User {
  id           Int      @id @default(autoincrement())
  email        String   @unique
  passwordHash String   @map("password_hash")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  balances Balance[]
  holdings Holding[]
  orders   Order[]
  trades   Trade[]

  @@map("users")
}

model Balance {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  currency  String   @db.VarChar(10)
  amount    Decimal  @db.Decimal(20, 8)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, currency])
  @@map("balances")
}

model Holding {
  id                Int      @id @default(autoincrement())
  userId            Int      @map("user_id")
  symbol            String   @db.VarChar(10)
  quantity          Decimal  @db.Decimal(20, 8)
  avgPurchasePrice  Decimal  @map("avg_purchase_price") @db.Decimal(20, 8)
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("holdings")
}

enum OrderType {
  MARKET
  LIMIT
  STOP_LOSS

  @@map("order_type")
}

enum OrderSide {
  BUY
  SELL

  @@map("order_side")
}

enum OrderStatus {
  PENDING
  FILLED
  CANCELLED

  @@map("order_status")
}

model Order {
  id        Int         @id @default(autoincrement())
  userId    Int         @map("user_id")
  symbol    String      @db.VarChar(10)
  type      OrderType
  side      OrderSide
  quantity  Decimal     @db.Decimal(20, 8)
  price     Decimal?    @db.Decimal(20, 8)
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now()) @map("created_at")
  filledAt  DateTime?   @map("filled_at")
  updatedAt DateTime    @updatedAt @map("updated_at")

  // Relations
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  trades Trade[]

  @@map("orders")
}

model Trade {
  id        Int      @id @default(autoincrement())
  orderId   Int?     @map("order_id")
  userId    Int      @map("user_id")
  symbol    String   @db.VarChar(10)
  side      String   @db.VarChar(4) // 'buy' or 'sell'
  quantity  Decimal  @db.Decimal(20, 8)
  price     Decimal  @db.Decimal(20, 8)
  total     Decimal  @db.Decimal(20, 8)
  fee       Decimal  @default(0) @db.Decimal(20, 8)
  executedAt DateTime @default(now()) @map("executed_at")

  // Relations
  user  User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  order Order? @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("trades")
}